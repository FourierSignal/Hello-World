# target
# prerequisites/dependencies
# recipe

# Rule : (target,prerquisites,recipe)

concept1
---------
# syntax of a typical rule:
target: prerequisites
<TAB> recipe


concept2
---------
#target might be a binary file that depends on prerequisites (source files/other binaries).
#On the other hand, a prerequisite can also be a target that depends on other dependencies:
final_target: sub_target final_target.c
        Recipe_to_create_final_target
sub_target: sub_target.c
        Recipe_to_create_sub_target


concept3
---------

#phony targets:
#It is not necessary for the target to be a file; it could be just a name for the recipe. We call these "phony targets."

say_hello:
        echo "Hello World"
# above phony target's output is ; echo Hello World
#To suppress echoing the actual command @ is used

Example1:
-----------
say_hello:
        @echo "Hello World"

generate:
        @echo "Creating empty text files..."
        touch file-{1..10}.txt

clean:
        @echo "Cleaning up..."
        rm *.txt

#if you run make , only the target say_hello will be executed. That's because only the first target in the makefile is the default target. Often called the default goal.
#We can override this behavior using a special phony target called .DEFAULT_GOAL.
Example2:
-----------
.DEFAULT_GOAL := generate
say_hello:
        @echo "Hello World"

generate:
        @echo "Creating empty text files..."
        touch file-{1..10}.txt

clean:
        @echo "Cleaning up..."
        rm *.txt
#this runs only the target generate
#This is why most makefiles include all as a target that can call as many targets as needeid

Example3:
----------
all: say_hello generate

say_hello:
        @echo "Hello World"

generate:
        @echo "Creating empty text files..."
        touch file-{1..10}.txt

clean:
        @echo "Cleaning up..."
        rm *.txt


concept4
---------
another special phony target, .PHONY : where we define all the targets that are not files.
make will run its recipe regardless of whether a file with that name exists or what its last modification time is.

.PHONY: all say_hello generate clean

all: file1 file2

file1: file1.c
	$(CC) file1.c -o file1

file2: file2.c
	$(CC) file2.c -o file2

say_hello:
        @echo "Hello World"

generate:
        @echo "Creating empty text files..."
        touch file-{1..10}.txt

clean:
        @echo "Cleaning up..."
        rm *.txt



concept5 -  recursive expanded variable vs simply expanded variable

CC = gcc  :  recursive expanded variable, Both ${CC} and $(CC) are valid references to call gcc

reassigning  a variable to itself, will cause an infinite loop. Let's verify this:
CC = gcc
CC = ${CC}
all:
    @echo ${CC}

Running make will result in:
$ make
Makefile:8: *** Recursive variable 'CC' references itself (eventually).  Stop.


To avoid this scenario, we can use the := operator (this is also called the simply expanded variable).
CC := gcc
CC := ${CC}
all:
    @echo ${CC}
now We should have no problem running the make



concept6  Variables,Patterns and functions
--------------------------------------------

by using variables, patterns, and functions The following makefile can compile all C programs

# Usage:
# make        # compile all binary
# make clean  # remove ALL binaries and objects

.PHONY = all clean

CC = gcc                        # compiler to use

LINKERFLAG = -lm

SRCS := $(wildcard *.c)
BINS := $(SRCS:%.c=%)

all: ${BINS}

%: %.o
        @echo "Checking.."
        ${CC} ${LINKERFLAG} $< -o $@

%.o: %.c
        @echo "Creating object.."
        ${CC} -c $<

clean:
        @echo "Cleaning up..."
        rm -rvf *.o ${BINS}

Explaination of above make file;
--------------------------------


Lines starting with # are comments.

Line .PHONY = all clean defines phony targets all and clean.

Variable LINKERFLAG defines flags to be used with gcc in a recipe.

SRCS := $(wildcard *.c): $(wildcard pattern) is one of the functions for filenames. In this case, all files with the .c extension will be stored in a variable SRCS.

BINS := $(SRCS:%.c=%): This is called as substitution reference. In this case, if SRCS has values 'foo.c bar.c', BINS will have 'foo bar'.

Line all: ${BINS}: The phony target all calls values in${BINS} as individual targets.



Rule:
%: %.o
  @echo "Checking.."
  ${CC} ${LINKERFLAG} $&lt; -o $@

Let's look at an example to understand this rule. Suppose foo is one of the values in ${BINS}. Then % will match foo(% can match any target name). Below is the rule in its expanded form:

foo: foo.o
  @echo "Checking.."
  gcc -lm foo.o -o foo

As shown,
% is replaced by foo.
$< is patterned to match prerequisites :  $< is replaced by foo.o
$@ matches the target. 
This rule will be called for every value in ${BINS}



Rule:
%.o: %.c
  @echo "Creating object.."
  ${CC} -c $&lt;

Exvery prerequisite in the previous rule is considered a target for this rule. Below is the rule in its expanded form:

foo.o: foo.c
  @echo "Creating object.."
  gcc -c foo.c


Explaination2 for same make file:
-----------------------------------
Below is the rewrite of the above makefile, assuming it is placed in the directory having a single file foo.c:

# Usage:
# make        # compile all binary
# make clean  # remove ALL binaries and objects

.PHONY = all clean

CC = gcc                        # compiler to use

LINKERFLAG = -lm

SRCS := foo.c
BINS := foo

all: foo

foo: foo.o
        @echo "Checking.."
        gcc -lm foo.o -o foo

foo.o: foo.c
        @echo "Creating object.."
        gcc -c foo.c

clean:
        @echo "Cleaning up..."
        rm -rvf foo.o foo






Explaination3 for same make file:
-----------------------------------
Below is the rewrite of the above makefile, assuming it is placed in the directory having a two  files foo.c,bar.c:

# Usage:
# make        # compile all binary
# make clean  # remove ALL binaries and objects

.PHONY = all clean

CC = gcc                        # compiler to use

LINKERFLAG = -lm

SRCS := foo.c bar.c
BINS := foo bar

all: foo bar

foo: foo.o
        @echo "Checking.."
        gcc -lm foo.o -o foo

foo.o: foo.c
        @echo "Creating object.."
        gcc -c foo.c

bar: bar.o
        @echo "Checking.."
        gcc -lm bar.o -o bar

bar.o: bar.c
        @echo "Creating object.."
        gcc -c bar.c


clean:
        @echo "Cleaning up..."
        rm -rvf foo.o foo
        rm -rvf bar.o bar



Example make file 1
------------------
CC=gcc
CFLAGS=-I.
DEPS = hellomake.h

%.o: %.c $(DEPS)
	$(CC) -c -o $@ $< $(CFLAGS)

hellomake: hellomake.o hellofunc.o
	$(CC) -o hellomake hellomake.o hellofunc.o



Example make file 2
--------------------
CC=gcc
CFLAGS=-I.
DEPS = hellomake.h
OBJ = hellomake.o hellofunc.o 

%.o: %.c $(DEPS)
	$(CC) -c -o $@ $< $(CFLAGS)

hellomake: $(OBJ)
	$(CC) -o $@ $^ $(CFLAGS)


Example make file 3
--------------------
IDIR =../include
CC=gcc
CFLAGS=-I$(IDIR)

ODIR=obj
LDIR =../lib

LIBS=-lm

_DEPS = hellomake.h
DEPS = $(patsubst %,$(IDIR)/%,$(_DEPS))

_OBJ = hellomake.o hellofunc.o
OBJ = $(patsubst %,$(ODIR)/%,$(_OBJ))


$(ODIR)/%.o: %.c $(DEPS)
	$(CC) -c -o $@ $< $(CFLAGS)

hellomake: $(OBJ)
	$(CC) -o $@ $^ $(CFLAGS) $(LIBS)

.PHONY: clean

clean:
	rm -f $(ODIR)/*.o *~ core $(INCDIR)/*~

#############################################################################################
Letting makeDeduce the Recipe:    make has implicit rules
------------------------------  
we can omit recipe, make can deduce them.


#############################################################################
https://opensource.com/article/18/8/what-how-makefile
---------------------------------------------------------
https://www.gnu.org/software/make/manual/make.pdf
------------------------------------------------------

