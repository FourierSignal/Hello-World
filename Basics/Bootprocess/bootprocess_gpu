http://www.dewassoc.com/globals/sitemap.html
http://www.dewassoc.com/kbase/hard_drives/master_boot_record.htm




BIOS process:
------------------------------------
internal power supply turns on, initializes and then takes a few moments to generate reliable power supply
motherboard's chipset will generate a reset signal to the processor.
After a Power Good signal is received, or after the reset button is released and there is confirmation of reliable power, the processor will be ready to start executing. 

the processor to always look at the same place in the system, the BIOS ROM, for the small bit of startup code to begin the boot process.
This is typically located at memory location FFFF0h, or right at the end of the system memory.
Since there are only 16 bytes from there to the end of conventional memory area, this location contains just a "jump" instruction telling the processor where to go to find the real BIOS startup program.

POST:
The BIOS performs the power-on self test (POST).
If there are any fatal errors, the boot process stops. 
If the POST is successful, the BIOS calls INT 19 (Interrupt 19) and then proceeds to look for devices attached to the motherboard.

INT19 process:
The BIOS code begins its search by looking for a video card, 
more particularly, its looking for the video card's built in BIOS program, (normally found at location C000h in memory) 
and if found, runs it. The system BIOS executes the video card BIOS, which in turn initializes the video card.
Most modern video cards will display information on the screen about the video card, before you see the messages from the system BIOS itself.

Once video has been enabled, the BIOS begins searching for other devices that may have their own ROM and whether that ROM has its own BIOS code.
If a floppy and/or hard drive is found, their codes are executed. If, during this INT 19 process, any other device BIOS's are found, they are executed as well.

The BIOS displays its startup screen.
the BIOS continues to perform additional tests:memory count.
it performs somewhat of an inventory of the hardware.
the BIOS will display a summary screen with your system's configuration.

depending on the boot sequence selected,Once the BIOS identifies its target boot drive, 
the it looks for boot information to start the operating system boot process. 
If it is searching a hard disk, it looks for a master boot record at cylinder 0, head 0, sector 1, the first sector on the disk
Next, the small program in the Master Boot Record will attempt to locate an active (bootable) partition in the hard drives partition table.
If such a partition is found, the boot sector of that partition is also read into memory at location 0000:7C00 
and then MBR program itself jumps to memory location 0000:7C00. 
Keep in mind that each operating system has its own boot sector format. 

the small program in the boot sector locating the first part of the operating system's kernel loader program
or in some cases the kernel itself or perhaps a boot manager program, and read then that into memory. 
For you Windows NT and Windows 2000 :this kernel loader is referred to as NTLDR.

If no boot device of any type can be found, the system will display an error message and stop
error message can range from "No boot device" to the very cryptic "NO ROM BASIC - SYSTEM HALTED".
This will also happen if you have a bootable hard disk partition but forget to set it active.

In summary , If an active partition is found, regardless of where it is found,
that partition's boot record is read into memory at 0000:7c00
and then the MBR code is added to 0000:7c00 pointing to the partition table entry that describes the partition being booted.
The boot record program uses this data to determine the drive being booted from and the exact location of the partition on the disk. 
If no active partition table entry can be found, the boot process enters ROM BASIC via INT 18.
All other errors will cause the system to hang or stop.

This entire process is referred to as a "cold boot" (since the machine was off, or cold, when it started). 
A "warm boot" also known as a "soft boot" is the same thing except it occurs when the machine is rebooted using the Ctrl + Alt + Del keys.
In this case the POST is skipped and the boot process continues to INT 19 .
On most systems, Ctrl + Alt + Del causes a soft-boot.





Kernel boot process
------------------------
BIOS prom chip  on motherboard: has small code :system BIOS
The BIOS performs several steps to test the system and make it ready before an operating system can be loaded.
Once the BIOS has completed its testing and system configuration, it begins the process of loading the operating system.
searching the installed drives for a Master Boot Record in which is contained a boot code.
BIOS ROM finds out MBR of Harddisk
boot code in MBR invokes GRUB.
GRUB loads linux vmlinuz-x.x.x-x-name in /boot
kernel need a filesystem containing drivers available to it at boot time:"initrd" (initial RAM disk) or "initramfs" 
/boot/initrd.img-x.x.x.x-name is initrd
GRUB will load the kernel at a location in memory, and the initrd at a different location, 
and jump to the kernel telling it where the initrd is, starting Linux.


MBR(Master boot record)/Master boot sector/boot sector:
--------------------------------------------------------
is always located at cylinder 0, head 0, and sector 1, the first sector on the disk.

The master boot record contains the following structures:

Master Partition Table: 
This small bit of code/table: describing partitions on the hard disk. 
When the developers designed the size of this master partition table, they left just enough room for the description of four partitions.
hence the four partition (physical partitions/primary partitions.) limit.
Any additional partitions must be logical partitions that are linked to (or are part of) one of the primary partitions.
One of these primary partitions is marked as active, indicating that it is the one that the computer should used to continue the boot process.

Master Boot Code: 
The master boot record is the small bit of computer code that the BIOS loads and executes to start the boot process. 
This code transfers control to the boot program stored on the boot (active) partition to load the operating system.

Many things can damage the Master Boot Record, 
therefore it might be helpful for you to know where certain portions of the code reside in the MBR, should you have to recover the MBR manually.
You will find that:
    The MBR program code starts at offset 0000.
    The MBR messages start at offset 008b.
    The partition table starts at offset 01be.
    The signature is at offset 01fe.

####################################################################################################################################################################
Notes (Extremely Important):

The first byte of an active partition table entry is 80.
This byte is loaded into the DL register before INT 13 is called to read the boot sector.
When INT 13 is called, DL is the BIOS device number. 
Because of this, the boot sector read by this MBR program can only be read from BIOS device number 80 (the first hard disk). 
This is one of the reasons why it is usually not possible to boot from any other hard disk.
Of course, there are exceptions to every rule, but those are beyond the scope of this text.

The MBR program uses the CHS based INT 13H AH=02H call to read the boot sector of the active partition. 
The location of the active partition's boot sector is in the partition table entry in CHS format.
If the drive is 528MB, this CHS must be a translated CHS. No addresses in LBA form are used (another reason why LBA does not solve the 528MB problem).

Entire MBR record in hex and ASCII
OFFSET 0 1 2 3  4 5 6 7  8 9 A B  C D E F  *0123456789ABCDEF*
000000 fa33c08e d0bc007c 8bf45007 501ffbfc *.3.....|..P.P...*
000010 bf0006b9 0001f2a5 ea1d0600 00bebe07 *................*
000020 b304803c 80740e80 3c00751c 83c610fe *.....t....u.....*
000030 cb75efcd 188b148b 4c028bee 83c610fe *.u......L.......*
000040 cb741a80 3c0074f4 be8b06ac 3c00740b *.t....t.......t.*
000050 56bb0700 b40ecd10 5eebf0eb febf0500 *V.......^.......*
000060 bb007cb8 010257cd 135f730c 33c0cd13 *..|...W.._s.3...*
000070 4f75edbe a306ebd3 bec206bf fe7d813d *Ou...........}.=*
000080 55aa75c7 8bf5ea00 7c000049 6e76616c *U.u.....|..Inval*
000090 69642070 61727469 74696f6e 20746162 *id partition tab*
0000a0 6c650045 72726f72 206c6f61 64696e67 *le.Error loading*
0000b0 206f7065 72617469 6e672073 79737465 * operating syste*
0000c0 6d004d69 7373696e 67206f70 65726174 *m.Missing operat*
0000d0 696e6720 73797374 656d0000 00000000 *ing system......*
0000e0 00000000 00000000 00000000 00000000 *................*
0000f0 TO 0001af SAME AS ABOVE
0001b0 00000000 00000000 00000000 00008001 *................*
0001c0 0100060d fef83e00 00000678 0d000000 *...........x....*
0001d0 00000000 00000000 00000000 00000000 *................*
0001e0 00000000 00000000 00000000 00000000 *................*
0001f0 00000000 00000000 00000000 000055aa *..............U.*
   
   

Disassembly of the MBR
This sector is initially loaded into memory at 0000:7c00 but it immediately relocates itself to 0000:0600.


                 BEGIN:                      NOW AT 0000:7C00, RELOCATE

0000:7C00 FA            CLI                     disable int's
0000:7C01 33C0          XOR     AX,AX           set stack seg to 0000
0000:7C03 8ED0          MOV     SS,AX
0000:7C05 BC007C        MOV     SP,7C00         set stack ptr to 7c00
0000:7C08 8BF4          MOV     SI,SP           SI now 7c00
0000:7C0A 50            PUSH    AX
0000:7C0B 07            POP     ES              ES now 0000:7c00
0000:7C0C 50            PUSH    AX
0000:7C0D 1F            POP     DS              DS now 0000:7c00
0000:7C0E FB            STI                     allow int's
0000:7C0F FC            CLD                     clear direction
0000:7C10 BF0006        MOV     DI,0600         DI now 0600
0000:7C13 B90001        MOV     CX,0100         move 256 words (512 bytes)
0000:7C16 F2            REPNZ                   move MBR from 0000:7c00
0000:7C17 A5            MOVSW                      to 0000:0600
0000:7C18 EA1D060000    JMP     0000:061D       jmp to NEW_LOCATION

        NEW_LOCATION:                        NOW AT 0000:0600

0000:061D BEBE07      MOV     SI,07BE           point to first table entry
0000:0620 B304        MOV     BL,04             there are 4 table entries

        SEARCH_LOOP1:                        SEARCH FOR AN ACTIVE ENTRY

0000:0622 803C80      CMP     BYTE PTR [SI],80  is this the active entry?
0000:0625 740E        JZ      FOUND_ACTIVE      yes
0000:0627 803C00      CMP     BYTE PTR [SI],00  is this an inactive entry?
0000:062A 751C        JNZ     NOT_ACTIVE        no
0000:062C 83C610      ADD     SI,+10            incr table ptr by 16
0000:062F FECB        DEC     BL                decr count
0000:0631 75EF        JNZ     SEARCH_LOOP1      jmp if not end of table
0000:0633 CD18        INT     18                GO TO ROM BASIC

        FOUND_ACTIVE:                        FOUND THE ACTIVE ENTRY

0000:0635 8B14        MOV     DX,[SI]           set DH/DL for INT 13 call
0000:0637 8B4C02      MOV     CX,[SI+02]        set CH/CL for INT 13 call
0000:063A 8BEE        MOV     BP,SI             save table ptr

        SEARCH_LOOP2:                        MAKE SURE ONLY ONE ACTIVE ENTRY

0000:063C 83C610      ADD     SI,+10            incr table ptr by 16
0000:063F FECB        DEC     BL                decr count
0000:0641 741A        JZ      READ_BOOT         jmp if end of table
0000:0643 803C00      CMP     BYTE PTR [SI],00  is this an inactive entry?
0000:0646 74F4        JZ      SEARCH_LOOP2      yes

          NOT_ACTIVE:                        MORE THAN ONE ACTIVE ENTRY FOUND

0000:0648 BE8B06      MOV     SI,068B           display "Invld prttn tbl"

         DISPLAY_MSG:                        DISPLAY MESSAGE LOOP

0000:064B AC          LODSB                     get char of message
0000:064C 3C00        CMP     AL,00             end of message
0000:064E 740B        JZ      HANG              yes
0000:0650 56          PUSH    SI                save SI
0000:0651 BB0700      MOV     BX,0007           screen attributes
0000:0654 B40E        MOV     AH,0E             output 1 char of message
0000:0656 CD10        INT     10                   to the display
0000:0658 5E          POP     SI                restore SI
0000:0659 EBF0        JMP     DISPLAY_MSG       do it again

                HANG:                        HANG THE SYSTEM LOOP

0000:065B EBFE        JMP     HANG              sit and stay!

           READ_BOOT:                        READ ACTIVE PARITION BOOT RECORD

0000:065D BF0500      MOV     DI,0005           INT 13 retry count

           INT13RTRY:                        INT 13 RETRY LOOP

0000:0660 BB007C      MOV     BX,7C00
0000:0663 B80102      MOV     AX,0201           read 1 sector
0000:0666 57          PUSH    DI                save DI
0000:0667 CD13        INT     13                read sector into 0000:7c00
0000:0669 5F          POP     DI                restore DI
0000:066A 730C        JNB     INT13OK           jmp if no INT 13
0000:066C 33C0        XOR     AX,AX             call INT 13 and
0000:066E CD13        INT     13                   do disk reset
0000:0670 4F          DEC     DI                decr DI
0000:0671 75ED        JNZ     INT13RTRY         if not zero, try again
0000:0673 BEA306      MOV     SI,06A3           display "Errr ldng systm"
0000:0676 EBD3        JMP     DISPLAY_MSG       jmp to display loop

             INT13OK:                        INT 13 ERROR

0000:0678 BEC206      MOV     SI,06C2              "missing op sys"
0000:067B BFFE7D      MOV     DI,7DFE              point to signature
0000:067E 813D55AA    CMP     WORD PTR [DI],AA55   is signature correct?
0000:0682 75C7        JNZ     DISPLAY_MSG          no
0000:0684 8BF5        MOV     SI,BP                set SI
0000:0686 EA007C0000  JMP     0000:7C00            JUMP TO THE BOOT SECTOR
                                                      WITH SI POINTING TO
                                                      PART TABLE ENTRY

Messages here.

0000:0680 ........ ........ ......49 6e76616c *           Inval*
0000:0690 69642070 61727469 74696f6e 20746162 *id partition tab*
0000:06a0 6c650045 72726f72 206c6f61 64696e67 *le.Error loading*
0000:06b0 206f7065 72617469 6e672073 79737465 * operating syste*
0000:06c0 6d004d69 7373696e 67206f70 65726174 *m.Missing operat*
0000:06d0 696e6720 73797374 656d00.. ........ *ing system.     *

Data not used.

0000:06d0 ........ ........ ......00 00000000 *           .....*
0000:06e0 00000000 00000000 00000000 00000000 *................*
0000:06f0 00000000 00000000 00000000 00000000 *................*
0000:0700 00000000 00000000 00000000 00000000 *................*
0000:0710 00000000 00000000 00000000 00000000 *................*
0000:0720 00000000 00000000 00000000 00000000 *................*
0000:0730 00000000 00000000 00000000 00000000 *................*
0000:0740 00000000 00000000 00000000 00000000 *................*
0000:0750 00000000 00000000 00000000 00000000 *................*
0000:0760 00000000 00000000 00000000 00000000 *................*
0000:0770 00000000 00000000 00000000 00000000 *................*
0000:0780 00000000 00000000 00000000 00000000 *................*
0000:0790 00000000 00000000 00000000 00000000 *................*
0000:07a0 00000000 00000000 00000000 00000000 *................*
0000:07b0 00000000 00000000 00000000 0000.... *............    *

The partition table starts at 0000:07be.  Each partition table
entry is 16 bytes.  This table defines a single primary partition
which is also an active (bootable) partition.

0000:07b0 ........ ........ ........ ....8001 *            ....*
0000:07c0 0100060d fef83e00 00000678 0d000000 *...........x....*
0000:07d0 00000000 00000000 00000000 00000000 *................*
0000:07e0 00000000 00000000 00000000 00000000 *................*
0000:07f0 00000000 00000000 00000000 0000.... *............    *

The last two bytes contain a 55AAH signature.

0000:07f0 ........ ........ ........ ....55aa *..............U.*
   
####################################################################################################################################################################

The MS-DOS Boot Process:

If the operating system is MS-DOS or any variant of Windows(other than WindowsNT or Windows2000):
process starts out by booting the equivalent of DOS, then a specific operating system load sequence commences, which is referred to as the DOS Boot Process.
i.e If you are booting into Windows, additional steps are performed after the underlying MS-DOS operating system has loaded.

MS-DOS boot process:

    The BIOS, having completed its test and setup functions, loads the boot code found in the master boot record and then transfers control of the system to it. At that point, the master boot record code is executed. If the boot device is a floppy disk, the process skips to step 7 below.

    The next step in the process is the master boot code examining the master partition table. It first must determine if there is an extended DOS partition, then it must determine if there is a bootable partition specified in the partition table.

    If the master boot code locates an extended partition on the disk, it loads the extended partition table that describes the first logical volume in the extended partition. This extended partition table is examined to see if it points to another extended partition table. If it does, this second table is examined for information about the second logical volume in the extended partition. Logical volumes in the extended partition have their extended partition table chained together one to the next. This process continues until all of the extended partitions have been loaded and recognized by the system.

    Once the extended partition information (if any) has been loaded, the boot code attempts to start the primary partition that is marked active, referred to as the boot partition. If no boot partitions are marked active, then the boot process will terminate with an error. The error message is often the same as that which occurs if the BIOS could not locate a boot device, generally shown on screen as "No boot device", but also can show up as "NO ROM BASIC - SYSTEM HALTED". If there is a primary partition marked active and there is an installed operating system, the boot code will boot it. The rest of the steps presume this example is of an MS- DOS primary partition.

    At this stage, the master or volume boot sector is loaded into memory and tested, and the boot code that it contains is given control of the remainder of the boot process.

    The boot code examines the disk structures to ensure that everything is correct. If not, the boot process will end in an error here.

    During the next step, the boot code searches the root directory of the device being booted for the operating system files that contain the operating system. For MS-DOS, these are the files "IO.SYS", "MSDOS.SYS" and "COMMAND.COM".

    If no operating system files are found, the boot program will display an error message similar to "Non-system disk or disk error - Replace and press any key when ready". Keep in mind that his message does not means that the system was never booted. It means that the BIOS examined the floppy disk for example and just rejected it because it couldn't boot an operating system. The volume boot code was indeed loaded and executed, as that is what posts the message when it can't find the operating system files.

    In the final stages of the boot process, presuming that the operating system files are found, the boot program will load those operating system files into memory and transfer control to them. In MS-DOS, the first is IO.SYS and its code is executed. IO.SYS will then execute MSDOS.SYS. Then the more complete operating system code loads and initializes the rest of the operating system structures beginning with the command interpreter COMMAND.COM and then the execution of the CONFIG.SYS and AUTOEXEC.BAT files. At this point the operating system code itself has control of the computer.

If any of the Windows 95/98/ME versions were being started, the above would only be the beginning of the startup process. When MS-DOS starts in anticipation of loading these Windows versions, there are many more routines that are loaded and executed as part of the boot process, which includes such tasks such as reading the system registry, initializing hardware devices and starting the graphical user interface or operating system shell. 

####################################################################################################################################################################









download a more recent kernel from kernel.org 
create a new kernel binary image
make or update an initrd with drivers that work with that kernel
