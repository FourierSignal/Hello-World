

Toolchain contents:
Cross-compilation toolchain generated by Buildroot
▶arm-buildroot-linux-uclibcgnueabihf/
▶bin/
▶include/
▶lib/
▶libexec/
▶share/




▶arm-buildroot-linux-uclibcgnueabihf/
   ▶bin/
      Limited set of binutils programs, without their cross-compilation prefix.
      Hard links to their counter parts with the prefix. This is where gcc finds them.
   ▶include/c++/4.9.4/
      Headers for the C++ standard library, installed bygcc
      Interestingly, they are not part of the sysroot per-se.
   ▶lib/
      The gcc run time libraries, built for the target
      libatomic, provides a software implementation of atomic built-ins, when needed
      libgcc, the maingccruntime (optimized functions, 64-bit division, floating pointemulation)
      libitm, transactional memory library
      libstdc++, standard C++ library
      libsupc++, subset oflibstdc++with only thelanguage supportfunctions
   ▶sysroot/
      ▶lib/  : C library 
      ▶usr/lib/: and gcc runtime libraries (shared and static)
      ▶usr/include/, Linux kernel and C library headers
▶bin/
▶include/
▶lib/
▶libexec/
▶share/





▶arm-buildroot-linux-uclibcgnueabihf/
▶bin/
   ▶arm-buildroot-linux-uclibcgnueabihf-prefixed tools
   Frombinutils: addr2line, ar, as, elfedit, gcov, gprof, ld, nm, objcopy, objdump,ranlib, 
        readelf, size, strings, strip
   Fromgcc: c++ (same as g++), cc (same as gcc), cpp, g++, gcc, gcc-ar, gcc-nm,gcc-ranlib
   Thegcc-{ar,nm,ranlib}are wrappers for the corresponding binutils program,tosupport Link Time Optimization (LTO)
▶include/
▶lib/
▶libexec/
▶share/




▶arm-buildroot-linux-uclibcgnueabihf/
▶bin/
▶include/
   ▶Headers of the host libraries (gmp,mpfr,mpc)
▶lib/
▶libexec/
▶share/


▶arm-buildroot-linux-uclibcgnueabihf/
▶bin/
▶include/
▶lib/
   ▶gcc/arm-buildroot-linux-uclibcgnueabihf/4.9.4/
     crtbegin*.o,crtend*.o, object files handling constructors/destructors, linked into executables
     ▶include/,
        headers provided by the compiler (stdarg.h,stdint.h,stdatomic.h, etc.)
     ▶include-fixed/,
        system headers that gcc fixed up using fix includes
     ▶install-tools/, 
        also related to the fix includes process
     ▶libgcc.a,libgcc_eh.a,libgcov.a, static variants of the gcc runtime libraries
     ▶ldscripts/, linker scripts provided by gccto link programs and libraries
     ▶Host version of gmp,mpfr,mpc, needed for gcc
▶libexec/
▶share/


▶arm-buildroot-linux-uclibcgnueabihf/
▶bin/
▶include/
▶lib/
▶libexec/
   ▶gcc/arm-buildroot-linux-uclibcgnueabihf/4.9.4/
      ▶cc1, the actual C compiler
      ▶cc1plus, the actual C++ compiler
      ▶collect2, program from gcc collecting initialization functions, wrapping the linker
      ▶install-tools/, misc gcc related tools, not needed for the compilation process
      ▶liblto_plugin.so.0.0.0,lto-wrapper,lto1, related to LTO support.
 ▶share/
 
 
 
 
 ▶arm-buildroot-linux-uclibcgnueabihf/
 ▶bin/
 ▶include/
 ▶lib/
 ▶libexec/
 ▶share/
   ▶documentation (man pages and info pages)
   ▶translation files for gcc and binutils
   
   
   
 
 Concept of sysroot
 ▶Thesysroot is the logical root directory for headers and libraries
   Where gcclooks for headers, and ld looks for libraries
 ▶Both gcc and binutils are built with--with-sysroot=<SYSROOT>
 ▶The kernel headers and the C library are installed in<SYSROOT>
 ▶If the toolchain has been moved to a different location,gcc
 will still find its sysroot
   if it’s in a subdir of--prefix
   ▶--prefix=/home/thomas/buildroot/arm-uclibc/host/usr
   ▶--with-sysroot=/home/thomas/buildroot/arm-uclibc/host/usr/arm-buildroot-linux-uclibcgnueabihf/sysroot
   ▶Can be overridden at runtime using gcc’s  --sysroot option.
   
   ▶The current sysroot can be printed using the -print-sysroot option
 
 ▶Most toolchains provide asingle sysroot with the C library and gcc runtime libraries
 ▶These libraries, built for the target, are optimized for aspecific architecture variant and ABI
 ▶Need to have one toolchain for each architecture variant or ABI
 ▶Multilib toolchains contain multiple sysroot,
    each having a version of the target libraries for different architecture/ABI variants.
   ▶Example of the Sourcery CodeBench ARM toolchain:
   $ arm-none-linux-gnueabi-gcc -print-multi-lib.;
    armv4t;@march=armv4tthumb2;@mthumb@march=armv7-a
   Three sysroots: ARMv5, ARMv4 and ARMv7 Thumb-2
   
   
▶The compiler automatically selects the right sysroot depending on the gcc flags:
$ arm-none-linux-gnueabi-gcc -march=armv5te -print-sysroot.../bin/../arm-none-linux-gnueabi/libc
$ arm-none-linux-gnueabi-gcc -march=armv4t -print-sysroot.../bin/../arm-none-linux-gnueabi/libc/armv4t
$ arm-none-linux-gnueabi-gcc -march=armv7-a -mthumb -print-sysroot.../bin/../arm-none-linux-gnueabi/libc/thumb2
▶Eachsysroothas a different library variant:
$ readelf -A arm-none-linux-gnueabi/libc/lib/ld-2.18.so
  Tag_CPU_name: "5TE"Tag_CPU_arch: v5TE
$ readelf -A arm-none-linux-gnueabi/libc/armv4t/lib/ld-2.18.so
  Tag_CPU_name: "4T"Tag_CPU_arch: v4T
$ readelf -A arm-none-linux-gnueabi/libc/thumb2/lib/ld-2.18.so
   Tag_CPU_name: "7-A"Tag_CPU_arch: v7Tag_THUMB_ISA_use: Thumb-2
   




▶Toolchain: just the compiler, binutils and C library▶SDK: a toolchain, plus a number (potentially large) of libraries built for the targetarchitecture, and additional native tools helpful when building software.▶Build systems such as OpenEmbedded or Yocto can typically:▶Use an existing toolchain as input, or build their own toolchain▶In addition to producing a root filesystem, they can also produce a SDK to allowapplication developers to build applications/libraries for the target.


▶Pre-built▶From yourdistribution. Ubuntu and Debian have numerous cross-compilers readilyavailable.▶From variousorganization: Linaro provides ARM and AArch64 toolchains, Mentorprovides a few free Sourcery CodeBench toolchains, Imagination provides MIPStoolchains, etc.▶Built it yourself▶Crosstool-NG, tool specialized in building cross-compilation toolchain. By far themost configurable/versatile.▶Embedded Linuxbuild systemsgenerally all know how to build a cross-compilationtoolchain: Yocto/OpenEmbedded, Buildroot, OpenWRT, etc


Overall build process▶The build process for a regular Linux cross-compilation toolchain is in fact fairlyeasy:1.Buildbinutils2.Build the dependencies ofgcc:mpfr,gmp,mpc3.Install the Linux kernel headers4.Build a first stagegcc: no support for a C library, support only for static linking5.Build theC libraryusing the first stagegcc6.Build the finalgcc, with C library and support for dynamic linking



 


