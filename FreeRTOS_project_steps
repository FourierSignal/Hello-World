Project : Watch-dog timer implementation for monitoring helath of tasks

problem :stack-overflow occuring 

solution:

In the Fn : void vTaskSwitchContext( void ) //FreeRTOS-Plus-Demo-1/Source/FreeRTOS-Products/FreeRTOS/tasks.c:2252:
before switching to next task.
taskCHECK_FOR_STACK_OVERFLOW(); 
vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );	
break point here to examine name of the task
=========> "name of task"as in below
xTaskCreate(vTask2, (const signed portCHAR*) "Simplecount", configMINIMAL_STACK_SIZE, NULL, portPRIVILEGE_BIT | configMAX_PRIORITIES-3,NULL);

in vTask2:
//	vPrintStringAndNumber("T2:xLastWakeTime=",xLastWakeTime ); causing stack overflow


ISP - In system programming -> programming the flash-memory of chip ,when chip is already installed/soldered in system.

As soon as active low Reset pin goes high ISP-pin is checked for 3ms.
If ISP pin is High with in this period => chip(uc)enters ISP mode.
chip(uc)accepts Flash-programming commands via the serial interface From Host M/C.

Usually, ISP requires that a service technician manually starts the re-programming procedure 
by halting the application and setting it into a special boot and/or programming mode.
Only after programming is completed, the application can be restarted.


IAP - In Application Programming-> programming the flash-memory of chip ,when chip is already installed/soldered in system
                                   and also during Application is running.

With IAP it is possible to implement applications that can be re-programmed remotely 
without the need of a service technician to actually be present

With on-chip Flash, IAP is only possible if supported by the microcontroller.
The Philips 89C51Rx2 parts support IAP also via the boot loader.
The application code can call functions in the boot loader area 
by loading parameters into the registers R0, R1 and DPTR and 
then calling a specific address in the boot loader. 
To make these functions easier to use, the Embedded Systems Academy provides a C library supporting all boot loader functions.
This allows erasing and programming directly from the C level, simply by calling C functions.

In general, IAP can always be realized with external Flash memory,
where microcontroller and memory are separated components. 
This is true as long as there is some additional code memory available out of which the microcontroller can execute code,
while the Flash memory is re-programmed.


problem 2:
once code with Watch-dog timer Enabled is in flash.
second time Flashing stops with error.:

Target error from Commit Flash write: Em(12).System rejected access at location 0x0300FFFD - 
verify Population of memory and peripherals

This is due to - WATCHDOG exception / reboot preventing  DEBUG interface - flashing the mem.

Communication between Debugger and Processor can not be established
there is a watchdog which needs to be deactivated

Regaining debug access to target MCU : https://community.nxp.com/thread/389112
http://support.code-red-tech.com/CodeRedWiki/DebugAccessChip


Vector catch is a mechanism used to trap processor exceptions.
This feature is typically used in the early stages of development to trap processor exceptions before the appropriate handlers are installed. You select the vectors to trap by editing the vector_catch value.


the NVICâ€™s Debug Exception and Monitor Control register, is used to control the debug activities
It manages exception behavior under debug.
It provides :debug monitor controlling , trace system enabling,  Vector Catch controlling
The upper halfword is for monitor controls and the lower halfword is for halting exception support.
This register is not reset on a system reset.

Vector catching is only available to halting debug.
The VC feature can be used only with halt mode debugging.
When a fault (or core reset) takes place and the corresponding VC control bit is set, 
the halt request will be set and the core will halt as soon as the current instruction completes.

If watch dog causes reset exception while debug core of processor is in writing the flash memory.==> 





To enable "vector catch" for the currently selected build configuration...

    Right click on the project in the Project Explorer view

    Select "Launch Configurations -> Open current launch configuration" from the context senstive menu.
    Click on the "Debugger" tab, then set the "Vector catch" entry to true. 
    
    
Warning about vector catch

Note that once you have recovered debug access to your MCU, then in most cases you should then modify your
Debug Configuration to turn vector catch off again. If this is not done, then this can cause problems in some circumstances with some versions of the Code Red IDE. For example with NXP LPC13xx parts, connecting more than once to the MCU with vector catch enabled can lead to the part ID being incorrectly read - which can again cause debug connections to fail:     




############################################################################################################################

 look into 2 aspects of lpc17xx/cm3 :

1) low-power features of the  processor/controller

2) tickless mode of operation of the FreeRTOS

sources of Info: lpc17xx user-manual, Definitive Guide's  and FreeRTOS site for tick less mode.

understand low-power and tick less mode from embedded perspective.

features of cortex-m3 processor:
ultra-low power consumption with integrated sleep modes
fast code execution permits slower processor clock or increases sleep mode time
power control optimization of system components

sleep modes : normal sleep and deep sleep
normal sleep might result in some of the clock signals being switched off, 
deep sleep might also reduce voltage supplies to the memory blocks and might switch off additionl components in the system. 


Entering sleep mode and Wakeup from sleep mode:
------------------------------------------------
what are the mechanisms software can use to put the processor into sleep mode ??
 
WFI(Wait for Interrupt) and WFE(Wait for Event) Instructions: allow the core to enter a low power mode and stop executing code
The power modes on a device are a combination of peripheral/device configuration and the WFE and WFI instructions

WFI:
WFI is targeted for entering either standby, dormant or shutdown mode, where an interrupt is required to wake-up the processor.
When the processor executes a WFI instruction it stops executing instructions and
enters sleep mode  unless the wake-up condition is true.

Wait for Interrupt mode disables most of the clocks of a CPU, while keeping its logic powered up.
To ensure that the memory system is not affected by the entry into the Standby state, the following operations are performed:
    A Data Synchronization Barrier, so ensuring that all explicit memory accesses occurring in program order before the WFI have completed. This avoids any possible deadlocks that could be caused in a system where memory access triggers or enables an interrupt that the core is waiting for.
    Any other memory accesses that have been started at the time that the WFI instruction is executed are completed as normal. This ensures that the Level 2 memory system does not see any disruption caused by the WFI.
    The debug channel remains active throughout a WFI. 
The transition from the WFI mode to the Run mode is caused by: masked or unmasked INTR,a debug request(regardless of whether debug is enabled )
a reset.



Wakeup from WFI :
the processor wakes up from WFI only when it detects an exception with sufficient priority.
Executing restore tasks before executing an interrupt handler:
Some embedded systems might have to execute system restore tasks after the processor wakes up,
and before it executes an interrupt handler.
{PRIMASK bit =1  prevents the activation of all exceptions with configurable priority.
FAULTMASK bit=1 prevents the activation of all exceptions except for NMI.}
achive this by setting  PRIMASK bit =1 and the FAULTMASKbit=0 => If an interrupt arrives that is enabled 
and has a higher priority than current exception priority,
the processor wakes up but does not execute the interrupt handler until the processor sets PRIMASK to zero




sleep-on-exit:  Use this mechanism in applications that only require the processor to run when an exception occurs
how to achieve this object : processor should sleep on exiting from exception handler
If the SLEEPONEXIT bit of the SCR is set to 1, when the processor completes the execution of all exception handlers
it returns to Thread mode and immediately enters sleep mode
 it is just like executing WFI immediately after the exception exit.
However, the unstacking process is not carried out because the registers 
will have to be pushed onto the stack at the next exception entry. 




WFE:

The event communication and WFE can be used together to reduce power in polling loops. 

A usage for WFE is to put processor into a spinlock loop.
If multiple CPUs are trying to access the resource, one will get access and will start to 
use the resource while the other CPUs will be stuck in the spinlock loop. To save power, you can 
insert the WFE instruction into the loop so the CPUs instead of looping continuously will enter 
STANDBTWFE. Then the CPU who has been using the resource should execute SEV instruction after it 
has finished using the resource. This will wake up all other CPUs from STANDBYWFE and another CPU 
can then access the shared resource.


The Wait For Event instruction, WFE, causes entry to sleep mode depending on the value of a one-bit event register.
When the processor executes a WFE instruction, it checks the value of the event register:
0 ------->     The processor stops executing instructions and enters sleep mode.
1 ------->     The processor clears the register to 0 and continues executing instructions without entering sleep mode.
               event register is 1=> an external event signal is asserted, or a processor in the system has executed an SEV instruction
               SEV(send event)is a hint instruction that causes an event to be signaled to all processors within a multiprocessor system               
               It  sets the local event register to 1
               
Wakeup from WFE
-------------------
The processor wakes up if:
    it detects an exception with sufficient priority to cause exception entry
    it detects an external event signal.{Your device might include an external event input signal, so that device peripherals can signal the processor}
    in a multiprocessor system, another processor in the system executes an SEV instruction.

 if the SEVONPEND bit in the SCR is set to 1, any new pending interrupt triggers an event and 
 wakes up the processor, even if the interrupt is disabled or has insufficient priority to cause exception entry.  

The event signal could be generated by on-chip peripherals or by another processor on the same chip
The event communication and WFE can be used together to reduce power in polling loops. 
use case: DMA controller
case 1: microcontroller system: 
a memory block copying process can be accelerated using a DMA controller.
If a polling loop is used to determine the DMA status, this will waste energy, consume memory bandwidth, 
and might end up slowing down the DMA operation.  

To save energy, we put the processor into  WFE sleep state,once DMA-operation started. 
When the DMA operation completes, we can then use a "Done" status signal to wake up the processor
and continue program execution. 

Enable_DMA_event_mask(); // Write to programmable enable mask register to enable DMA event
Start_DMA(); // Start DMA operation
do {
   __WFE(); // WFE Sleep operation, wake up when an event is received
} while (check_DMA_completed()==0);// could be awakened by other events,so check if it is DMA-complete event
Disable_DMA_event_mask(); // Write to programmable enable mask register to disable DMA event

case 2:  embedded OS : 
 an OS-specific delay function should be used instead of the WFE to allow the processor to switch to another task.

case 3: In multiprocessor systems:
interprocessor communication such as spin lock often involves polling software flags in shared memory.
Similar to the DMA controller example, the WFE sleep operation can be used to reduce power consumption during these activities.



race conditions :

  if (!dont_sleep)
    WFI();

would run the risk that an interrupt could occur between the 'if' and the 'wfi' and set dont_sleep, 
but the wfi would go ahead and execute anyway.

how to prevent that?

Set PRIMASK to 1 to prevent interrupts from interrupting the processor just before executing the WFI,
and clear it immediately after?

No matter how good your code is, if you don't disable interrupts, you
will always have a race between preparing to go to sleep and actually
going to sleep, which results in lost wake up events.
This is why all ARM CPUs I'm aware of will wake up even if they are
masked at the core CPU (CPSR I bit.)






The system can generate spurious wakeup events, for example a debug operation wakes up the processor.
Therefore software must be able to put the processor back into sleep mode after such an event.
A program might have an idle loop to put the processor back to sleep mode. 



System Control Register:  The SCR controls features of entry to and exit from low power state.
SEVONPEND(send event on pending bit): 



