simple uboot app:
--------------------
vsk1/uboot_stdalone/hello_world_simple$ cat hello_world.s
mov r1,#20
mov r2,#40
bx LR

 vsk1/uboot_stdalone/hello_world_simple$ cat Makefile
SDK_DIR = /tftpboot/dev_sdk.v00.00.01
CROSS_COMPILE = $(SDK_DIR)/toolchains/device_name-linux-5.1-gnueabihf/bin/arm-org-linux-gnueabihf-
CC=${CROSS_COMPILE}gcc
CA=${CROSS_COMPILE}as
CL=${CROSS_COMPILE}ld
COBJCP=${CROSS_COMPILE}objcopy
COBJD=${CROSS_COMPILE}objdump

LDFLAGS =  --verbose -T hello_world.ld
say_hello:
        @echo $(CC)
        @echo $(CA)
        @echo $(CL) $(LDFLAGS)
        @echo $(COBJCP)
all: clean hello_world.s
        #$(CC) $(LDFLAGS)  hello_world.s
        $(CA) hello_world.s -o hello_world.o
        $(CL) $(LDFLAGS)  hello_world.o -o  hello_world
        $(COBJCP) --gap-fill=0xff -O binary hello_world  hello_world.bin
        $(COBJD) -S hello_world >  hello_world.D
clean:
        rm -f hello_world hello_world.o hello_world.bin

rebuild: clean all

 vsk1/uboot_stdalone/hello_world_simple$
 we need to avoid gcc startup routines , so don't use gcc , instead compile stage by statge: as,ld,create image,dump-debug-info
use linker script to place application at right location in ddr.

cat hello_world.ld
MEMORY
        {
        ram     : ORIGIN = 0x80800000, LENGTH = 0x00031ff
        }


SECTIONS
{
        .text :
        {
        *(.text)
        } > ram

        .data :
        {
        *(.data)
        } > ram

        .bss :
        {
        *(.bss)
        } > ram
                __bss_end = .;

        .stack :
        {
        *(.stack)
        _src_addr = .;
        } > ram
}


loadb 0x80800000
through terminal program teraterm --kermit transfer file
go 0x80800000

 How it works:
 ---------------
 u-boot$ ls cmd/boot.c
 
 /* Allow ports to override the default behavior */
__attribute__((weak))
unsigned long do_go_exec(ulong (*entry)(int, char * const []), int argc,
                                 char * const argv[])
{
        return entry (argc, argv);
}

static int do_go(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
        ulong   addr, rc;
        int     rcode = 0;

        if (argc < 2)
                return CMD_RET_USAGE;

        addr = simple_strtoul(argv[1], NULL, 16);

        printf ("## Starting application at 0x%08lX ...\n", addr);

        /*
         * pass address parameter as argv[0] (aka command name),
         * and all remaining args
         */
        rc = do_go_exec ((void *)addr, argc - 1, argv + 1);
        if (rc != 0) rcode = 1;

        printf ("## Application terminated, rc = 0x%lX\n", rc);
        return rcode;
}

It Just a function call jump to addr/function-ptr
So Ensure function at right place using linker script 
and ensure return from function( with blx or return instructions)
------------------------------------------------------------------------------------------------------------------
c file compilation:
 cat hello_world.c
#include<stdio.h>
int  hello_world(void)
//void main()
{
        int a ,b;
        b = 25;
        a = b + a ;
        printf("hello...\n");
        return 0;
}


SDK_DIR = /tftpboot/device_sdk.v00.00.01
COMPILER_PATH = $(SDK_DIR)/toolchains/device-linux-5.1-gnueabihf
CROSS_COMPILE = $(SDK_DIR)/toolchains/device-linux-5.1-gnueabihf/bin/arm-org-linux-gnueabihf-
COMPILER_SYSROOT = $(COMPILER_PATH)/arm-org-linux-gnueabihf/sysroot
COMPILER_LIB_PATH = $(COMPILER_SYSROOT)/lib

LIBC_PATH = $(COMPILER_SYSROOT)/usr/lib



CC=${CROSS_COMPILE}cc
CA=${CROSS_COMPILE}as
CL=${CROSS_COMPILE}ld
COBJCP=${CROSS_COMPILE}objcopy
COBJD=${CROSS_COMPILE}objdump

LDFLAGS =  --verbose -T hello_world.ld -L $(LIBC_PATH)

all: clean hello_world.c
        #$(CC) hello_world.c  -o hello_world
        $(CC) hello_world.c -c  -o hello_world.o
        $(CL) $(LDFLAGS)   hello_world.o -lc  -o  hello_world
        $(COBJCP) --gap-fill=0xff -O binary hello_world  hello_world.bin
        $(COBJD) -S hello_world.o >  hello_world.s
        $(COBJD) -S hello_world >  hello_world.D
clean:
        rm -f hello_world hello_world.o hello_world.bin hello_world.D hello_world.s

rebuild: clean all

say_hello:
        @echo $(CC)
        @echo $(CA)
        @echo $(CL) $(LDFLAGS)
        @echo $(COBJCP)


---------------------------------------------------------------------------------------------
 sysroot/usr/lib/
audit   gcrt1.o             libc.a            libdl.a      libm.so           libnss_hesiod.so  librpcsvc.a   libstdc++.so.6              libutil.so
crt1.o  libanl.a            libc_nonshared.a  libdl.so     libnss_compat.so  libpthread.a      librt.a       libstdc++.so.6.0.25         Mcrt1.o
crti.o  libanl.so           libcrypt.a        libg.a       libnss_db.so      libpthread.so     librt.so      libstdc++.so.6.0.25-gdb.py  Scrt1.o
crtn.o  libBrokenLocale.a   libcrypt.so       libm.a       libnss_dns.so     libresolv.a       libstdc++.a   libthread_db.so
gconv   libBrokenLocale.so  libc.so           libmcheck.a  libnss_files.so   libresolv.so      libstdc++.so  libutil.a

example for linking a library:
$(CL) $(LDFLAGS)   hello_world.o -lpthread  -o  hello_world
$ CL) $(LDFLAGS)   hello_world.o -lc  -o  hello_world
----------------------------------------------------------------------------------------------------------------------------

org# loadb 0x80800000
## Ready for binary (kermit) download to 0x80800000 at 115200 bps...
## Total Size      = 0x000001d0 = 464 Bytes
## Start Addr      = 0x80800000
ast# go 0x80800000
## Starting application at 0x80800000 ...


U-Boot sdk-v00.00.01 (Dec 05 2019 - 12:55:56 +0800)

SOC : SOC2000-A0
PCI RST : #1 #2
eSPI Mode : SIO:Enable : SuperIO-2e
Eth :    MAC0: RMII/NCSI ,MAC1: RGMII ,MAC2: RGMII ,MAC3: RGMII
Model: ORG SOCname
DRAM:  already initialized, 1016 MiB
WARNING: Caches not enabled
MMC:   emmc_slot0@100: 0
Loading Environment from SPI Flash... SF: Detected w25q256 with page size 256 Bytes, erase size 4 KiB, total 32 MiB
*** Warning - bad CRC, using default environment

In:    serial@1e784000
Out:   serial@1e784000
Err:   serial@1e784000
Model: ORG soc
Net:
Warning: ftgmac@1e680000 (eth1) using random MAC address - e2:e8:cc:34:0d:4b
eth1: ftgmac@1e680000
Warning: ftgmac@1e670000 (eth2) using random MAC address - 9e:2c:c2:a3:03:47
, eth2: ftgmac@1e670000
Warning: ftgmac@1e690000 (eth3) using random MAC address - 4e:a9:19:29:d5:e7
, eth3: ftgmac@1e690000
Hit any key to stop autoboot:  0

Here application crashed, because regular printf is linked.
we need a printf file written using UART as stdout.
so write printflibary and link with application.


------------------------------------------------------------------------------------
print.c  -- write own / modify sample code from arm 


#include <defines.h>
//#include <MP_Mutexes.h>
//mutex_t *primeLock = (mutex_t *)0x84003000;
/*
void init_print_mutex(void){
        init_mutex(primeLock);
}
*/
void writeuartchar(char c)
{
        volatile unsigned int status=0;
printagain:
        /* Wait for Ready */
        do {
                status = *(volatile unsigned int*)(UART_BASE+SERIAL_LSR);
        } while (!((status & SERIAL_LSR_THRE)==SERIAL_LSR_THRE) );

        /* Write Character */
        *(volatile unsigned int*)(UART_BASE+SERIAL_THR) = c;
        if(c == '\n') {
                c = '\r';
                goto printagain;
        }

        return;
}

static void nc_printchar(char c)
{
        volatile unsigned int status=0;
printagain:
        /* Wait for Ready */
        do {
                status = *(volatile unsigned int*)(UART_BASE+SERIAL_LSR);
        } while (!((status & SERIAL_LSR_THRE)==SERIAL_LSR_THRE) );

        /* Write Character */
        *(volatile unsigned int*)(UART_BASE+SERIAL_THR) = c;
        if(c == '\n') {
                c = '\r';
                goto printagain;
        }

        return;
}

static void printchar(char **str, int c)
{
        if (str) {
                **str = c;
                ++(*str);
        }
        else nc_printchar(c);
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
        register int pc = 0, padchar = ' ';

        if (width > 0) {
                register int len = 0;
                register const char *ptr;
                for (ptr = string; *ptr; ++ptr) ++len;
                if (len >= width) width = 0;
                else width -= len;
                if (pad & PAD_ZERO) padchar = '0';
        }
        if (!(pad & PAD_RIGHT)) {
                for ( ; width > 0; --width) {
                        printchar (out, padchar);
                        ++pc;
                }
        }
        for ( ; *string ; ++string) {
                printchar (out, *string);
                ++pc;
        }
        for ( ; width > 0; --width) {
                printchar (out, padchar);
                ++pc;
        }

        return pc;
}

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
        char print_buf[PRINT_BUF_LEN];
        register char *s;
        register int t, neg = 0, pc = 0;
        register unsigned int u = i;

        if (i == 0) {
                print_buf[0] = '0';
                print_buf[1] = '\0';
                return prints (out, print_buf, width, pad);
        }

        if (sg && b == 10 && i < 0) {
                neg = 1;
                u = -i;
        }

        s = print_buf + PRINT_BUF_LEN-1;
        *s = '\0';

        while (u) {
                t = u % b;
                if( t >= 10 )
                        t += letbase - '0' - 10;
                *--s = t + '0';
                u /= b;
        }

        if (neg) {
                if( width && (pad & PAD_ZERO) ) {
                        printchar (out, '-');
                        ++pc;
                        --width;
                }
                else {
                        *--s = '-';
                }
        }

        return pc + prints (out, s, width, pad);
}

static int print(char **out, int *varg)
{
        register int width, pad;
        register int pc = 0;
        register char *format = (char *)(*varg++);
        char scr[2];

        for (; *format != 0; ++format) {
                if (*format == '%') {
                        ++format;
                        width = pad = 0;
                        if (*format == '\0') break;
                        if (*format == '%') goto out;
                        if (*format == '-') {
                                ++format;
                                pad = PAD_RIGHT;
                        }
                        while (*format == '0') {
                                ++format;
                                pad |= PAD_ZERO;
                        }
                        for ( ; *format >= '0' && *format <= '9'; ++format) {
                                width *= 10;
                                width += *format - '0';
                        }
                        if( *format == 's' ) {
                                register char *s = *((char **)varg++);
                                pc += prints (out, s?s:"(null)", width, pad);
                                continue;
                        }
                        if( *format == 'd' ) {
                                pc += printi (out, *varg++, 10, 1, width, pad, 'a');
                                continue;
                        }
                        if( *format == 'x' ) {
                                pc += printi (out, *varg++, 16, 0, width, pad, 'a');
                                continue;
                        }
                        if( *format == 'X' ) {
                                pc += printi (out, *varg++, 16, 0, width, pad, 'A');
                                continue;
                        }
                        if( *format == 'u' ) {
                                pc += printi (out, *varg++, 10, 0, width, pad, 'a');
                                continue;
                        }
                        if( *format == 'c' ) {
                                /* char are converted to int then pushed on the stack */
                                scr[0] = *varg++;
                                scr[1] = '\0';
                                pc += prints (out, scr, width, pad);
                                continue;
                        }
                }
                else {
                out:
                        printchar (out, *format);
                        ++pc;
                }
        }
        if (out) **out = '\0';
        return pc;
}
int should_i_print_this = 1;
/* assuming sizeof(void *) == sizeof(int) */

int printf(const char *format, ...)
{
//      lock_mutex(primeLock);
        register int *varg = (int *)(&format);
//      return 0;
        if(1 && !should_i_print_this)
                return 0;
        print(0, varg);
//      unlock_mutex(primeLock);
        return 0;
}

int err_printf(const char *format, ...)
{
        register int *varg = (int *)(&format);
        return print(0, varg);
}

int nc_sprintf(char *out, const char *format, ...)
{
        register int *varg = (int *)(&format);
        return print(&out, varg);
}


cat hello_world.c
extern int printf(const char *format, ...);

//int  main(void)
int  hello_world(void)
{
        int a ,b;
        b = 25;
        a = b + a ;
        printf("hello...\n");
        return 0;
}


(CC) -fno-builtin  -c --static  hello_world.c  ---- will generate hello_world.o
-fno-builtin option is crucial , without this puts symbol replaces printf and it links with glibc, evenif --sysroot option is given

cat Makefile
SDK_DIR = /tftpboot/sdk.v00.00.01
COMPILER_PATH = $(SDK_DIR)/toolchains/org2000-linux-5.1-gnueabihf
CROSS_COMPILE = $(SDK_DIR)/toolchains/org2000-linux-5.1-gnueabihf/bin/arm-org-linux-gnueabihf-
COMPILER_SYSROOT = $(COMPILER_PATH)/arm-org-linux-gnueabihf/sysroot
COMPILER_LIB_PATH = $(COMPILER_SYSROOT)/lib

CC=${CROSS_COMPILE}cc
CA=${CROSS_COMPILE}as
CL=${CROSS_COMPILE}ld
COBJCP=${CROSS_COMPILE}objcopy
COBJD=${CROSS_COMPILE}objdump
NM = ${CROSS_COMPILE}nm
RDELF = ${CROSS_COMPILE}readelf


INCL_PATH = $(PWD)/include/
LDFLAGS =  --verbose -T hello_world.ld

all: clean simple_stand_alone

simple_stand_alone:
        $(CC) -fno-builtin  -c --static  hello_world.c
        $(CC) -I $(INCL_PATH) -c print.c
        $(CL)  hello_world.o  print.o $(LDFLAGS) -o simple_stand_alone
        $(COBJCP) --gap-fill=0xff -O binary simple_stand_alone simple_stand_alone.bin
        $(COBJD) -S simple_stand_alone  >  simple_stand_alone.list
        $(COBJD) -t simple_stand_alone  >  simple_stand_alone.objd_sym
        $(NM) simple_stand_alone   >  simple_stand_alone.nm_sym
        $(RDELF) -a simple_stand_alone >  simple_stand_alone.rdelf
clean:
        rm -f  hello_world.o  print.o  simple_stand_alone*

rebuild: clean all

say_hello:
        @echo $(CC)
        @echo $(CA)
        @echo $(CL) $(LDFLAGS)
        @echo $(COBJCP)

-------------------------------------------------------------------------------



















creating a static Library (or) archive file:





https://developer.arm.com/tools-and-software/embedded/legacy-tools/ds-5-development-studio/downloads




/*
    OK, and resets too.
    /
#define SW_RESET_BASE   0x40100000
#define SYSSRERL2               0x854
#define SYSSRERH2               0x858
#define SYSRCR2         0x850
#define wfe()     _asm_ _volatile_ ("wfe" : : : "memory")
void reset_cpu(ulong addr)
{
        (volatile unsigned int )(SW_RESET_BASE  + SYSSRERL2) = 0x3;
        (volatile unsigned int )(SW_RESET_BASE  + SYSSRERH2) = 0;
        (volatile unsigned int )(SW_RESET_BASE + SYSRCR2) = 0xD01;

        printf("resetting CPI\n");

        while(1) {wfe();}
}
