
https://www.kernel.org/doc/Documentation/usb/usbmon.txt

http://www.linux-usb.org/usb.ids




 mount -t debugfs none_debugs /sys/kernel/debug
 modprobe usbmon
  
 jaguar-ThinkPad-T540p usbmon # pwd
/sys/kernel/debug/usb/usbmon
jaguar-ThinkPad-T540p usbmon # ls
0s  0u  1s  1t  1u  2s  2t  2u  3s  3t  3u  4s  4t  4u

 
  
   sysfs structures for Linux USB:
   
   
   jaguar@jaguar-ThinkPad-T540p ~ $ ls   /sys/bus/usb/devices/
1-0:1.0  1-12:1.0  1-3      1-7      2-0:1.0  3-1      4-0:1.0  4-1:1.0  usb2  usb4
1-12     1-12:1.1  1-3:1.0  1-7:1.0  3-0:1.0  3-1:1.0  4-1      usb1     usb3

USB-controllers:
The names that begin with "usb" refer to USB controllers.
More accurately, they refer to the "root hub" associated with each controller. 
usb1 ---> root hub of usb-controller. It's bus number is 1. //bus1-port0(not actually a port) is used to refer roothub of bus1
usb2 ---> root hub of usb-controller. It's bus number is 2

USB devices:   bus-port.port.port....
eg: 1-2.3.1 ==> bus1(root-hub) - device plugged into port2 of root-hub.This device is another hub
=> device plugged into port3 of that hub.this device is another hub
==> device plugged into port1 of that hub.this device is not a hub.
simply 1-2.3.1 == device plugged into : bus1--port2 of root-hub .port3 of 1st level-hub . port1 of 2nd level hub.

1-12 ---->  bus1 - port12  : device is attached to the port12 of roothub
4-1  ---->  bus4 - port1   : device is attached to port1 of roothub

Interfaces of devices :  bus-port.port.port..... :config.interface
Each interface gets its own entry in sysfs and can have its own driver.

eg:     1-2.3:1.0	 ==> device plugged into : bus1--port2 of root-hub .port3 of 1st level-hub . port1 of 2nd level hub
              device is using configuration 1 and this configuration has only a single interface, number 0.
1-12:1.1 

Special case : ROOT-HUB's interface
A hub will never have more than a single interface; that's part of the USB spec. 
But other devices can have multiple interfaces (and sometimes multiple configurations)
 eg: "1-0:1.0"  It refers to the root hub's interface. 
This acts just like the interface in an actual hub an almost every respec
1-0:1.0 -->  bus1-port0 is used to refer roothub of bus1 -- here roothub is part of controller,not actually a port.
2-0:1.0 
3-0:1.0
4-0:1.0



jaguar@jaguar-ThinkPad-T540p ~ $ cat   /sys/bus/usb/devices/1-3:1.0/bInterfaceClass
fe
jaguar@jaguar-ThinkPad-T540p ~ $ cat   /sys/bus/usb/devices/1-3:1.0/bInterfaceNumber
00
jaguar@jaguar-ThinkPad-T540p ~ $ cat   /sys/bus/usb/devices/1-3:1.0/bInterfaceProtocol
00
jaguar@jaguar-ThinkPad-T540p ~ $ cat   /sys/bus/usb/devices/1-3:1.0/bInterfaceSubClass
01
jaguar@jaguar-ThinkPad-T540p ~ $ cat   /sys/bus/usb/devices/1-3:1.0/bNumEndpoints
00













  
  
  
  cat /proc/bus/usb/devices : find the T-line which corresponds tothe device
  lsusb
  
  
  # cat /sys/kernel/debug/usbmon/3u > /tmp/1.mon.out

to listen on a single bus, otherwise, to listen on all buses, type:

# cat /sys/kernel/debug/usbmon/0u > /tmp/1.mon.out
 

sudo tshark -D







jaguar@jaguar-ThinkPad-T540p ~ $ sudo tshark -D
Running as user "root" and group "root". This could be dangerous.
tshark: Lua: Error during loading:
 [string "/usr/share/wireshark/init.lua"]:44: dofile has been disabled due to running Wireshark as superuser. See https://wiki.wireshark.org/CaptureSetup/CapturePrivileges for help in running Wireshark as an unprivileged user.
1. wlan0
2. nflog
3. nfqueue
4. pan1
5. usbmon1
6. usbmon2
7. usbmon3
8. usbmon4
9. any
10. lo (Loopback)

jaguar@jaguar-ThinkPad-T540p ~ $ lsusb
Bus 004 Device 002: ID 8087:8000 Intel Corp. 
Bus 004 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 003 Device 002: ID 8087:8008 Intel Corp. 
Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 002: ID 138a:0017 Validity Sensors, Inc. 
Bus 001 Device 005: ID 0471:df55 Philips (or NXP) LPCXpresso LPC-Link
Bus 001 Device 004: ID 5986:026a Acer, Inc 
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub

to capture 0471:df55 on bus 1 ----- in a file trace1.pcap

jaguar@jaguar-ThinkPad-T540p ~ $ tshark -i usbmon2 -w trace1.pcap 
Capturing on 'usbmon2'
tshark: Couldn't run /usr/bin/dumpcap in child process: Permission denied

jaguar@jaguar-ThinkPad-T540p ~ $ sudo tshark -i usbmon1 -w ~/trace1.pcap 
Running as user "root" and group "root". This could be dangerous.
tshark: Lua: Error during loading:
 [string "/usr/share/wireshark/init.lua"]:44: dofile has been disabled due to running Wireshark as superuser. See https://wiki.wireshark.org/CaptureSetup/CapturePrivileges for help in running Wireshark as an unprivileged user.
Capturing on 'usbmon1'
tshark: The file to which the capture would be saved ("/home/jaguar/trace1.pcap") could not be opened: Permission denied.



When a device plugs into a port, the device’s pull-up brings its line high,
enabling the hub to detect that a device is attached
The hub detects the device.

Each hub uses its interrupt endpoint
to report events at the hub. The report indicates only whether the hub or a
port (and if so, which port) has experienced an event



URB-status-word:=> 
(URB status, interval, start frame, and error count)
a letter/several numbers separated by colon 
(all fields except the status are optional : Interval is printed  only for interrupt and isochronous URBs. Start frame is printed only for
  isochronous URBs,Error count is printed only for isochronous callback  events.)

URB status : number
              This field makes no sense for submissions
              In case of a submission of a Control packet, this field contains a Setup Tag
              
if Setup Tag was 's': then only decode below
Setup packet : ( bmRequestType, bRequest, wValue, wIndex, wLength):as per USB-2.0.

ffff8801f6e0a6c0 3824618392 C Ii:1:001:1 0:2048 2 = 4000
explaination:
C - callback event 
Ii:1:001:1   ====   Interrupt : IN : bus-1 : device-1 : endpoint-1   // bus1,dev-1 is HUB.
URB type and direction, Bus number, Device address, Endpoint number

0:2048
status-0: Interval-2048

---------------------------------------------------------------------------------------------------------

ffff8801f6e0a6c0 3824618402 S Ii:1:001:1 -115:2048 4 <
S - setup event 
Ii:1:001:1   ====   Interrupt : IN : bus-1 : device-1 : endpoint-1   // bus1,dev-1 is HUB.
URB type and direction, Bus number, Device address, Endpoint number

-115:2048 
status-EINPROGRESS: Interval-2048
 
 4 <  
 requested data length =4
 -----------------------------------------------------------------------------------------------------------------
 
 ffff8800b5c8fa80 3824618413 S Ci:1:001:0 s a3 00 0000 0006 0004 4 <
 S - setup event 
 Ci:1:001:0   ====   Control : IN : bus-1 : device-1 : endpoint-0
 
 s 
 Setup Tag
 
 a3 00 0000 0006 0004
 bmRequestType = a3 , bRequest =00 , wValue=0000, wIndex=0006, wLength=0004
 
 bmRequestType: direction of data flow, the type of request, and the recipient.
 1(OUT/IN)010(standard/class-specific/vendor-specific)0011
 a3 = 1010 0011   ===> 1(dev->host) 01(class)  00011(other element in device)
 
 bRequest: 00 (GET_STATUS)
 wValue : request-specific value -
 wIndex : enpoint-index/interface-index  --- endpoint 6 => port6
 wLength: number of data bytes in the Data stage that follow
 
 
 
 
 
 
 
 
 
 
              
              
              





















Data transactions occur in three phases: Token, Data, and Handshake.

All communication on the USB is host-directed. 

In the Token phase, the host will generate a Token packet which will address a specific device/endpoint combination.
A Token packet can be IN, OUT, or SETUP.

IN  :  The host is requesting data from the addressed dev/ep.

OUT : The host is sending data to the addressed dev/ep.

SETUP:  The host is transmitting control information to the device.

In the data phase, the transmitter will send one data packet.
For IN requests, the device may send a NAK or STALL packet during the data phase to 
indicate that it isn’t able to service the token that it received.

 in the Handshake phase the receiver can send an ACK, NAK, or STALL indicating the success or failure of the transaction.
 
 All of the transfers described above follow this general scheme with the exception of the Isochronous transfer.
 In this case, no Handshake phase occurs because it is more important to stream data out in a timely fashion.
 It is acceptable to drop packets occasionally and there is no need to waste time by attempting to retransmit.
 
 
 
 
 








