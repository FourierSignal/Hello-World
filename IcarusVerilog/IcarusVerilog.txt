https://github.com/steveicarus/iverilog: by Stephen Williams : written in c++
-------------------------------------------------

iverilog command :  This program invokes the preprocessor (ivlpp) and the compiler (ivl) with the proper command line options.

------------------------ hello.vl ----------------------------
module main();

initial
  begin
    $display("Hi there");
    $finish ;
  end

endmodule

--------------------------------------------------------------
To compile the program:   iverilog hello.vl
The above presumes that /usr/local/include and /usr/local/lib are part of the compiler search path, which is usually the case for gcc

To run the program:    ./a.out

You can use the -o switch to name the output command to be generated by the compiler.
iverilog -o hello hello.vl

Icarus Verilog is in development - as such it still only supports a (growing) subset of Verilog.
Icarus Verilog web page for the current state of support for Verilog,and in particular, browse the bug report database for reported unsupported constructs.

 Below is a description of some of the currently unsupported Verilog features.
 System functions are supported, but the return value is a little tricky. See SYSTEM FUNCTION TABLE FILES in the iverilog man page.
Specify blocks are parsed but ignored in general.
trireg is not supported. tri0 and tri1 are supported.
tran primitives, i.e. tran, tranif1, tranif0, rtran, rtranif1 and rtranif0 are not supported.

Nonstandard Constructs or Behaviors:
Icarus Verilog includes some features that are not part of the IEEE1364 standard, but have well-defined meaning, and also sometimes gives nonstandard (but extended) meanings to some features of the language that are defined. See the "extensions.txt" documentation for more details.

Builtin system functions:
Certain of the system functions have well-defined meanings, so can theoretically be evaluated at compile-time, instead of using runtime VPI code. Doing so means that VPI cannot override the definitions of functions handled in this manner. On the other hand, this makes them synthesizable, and also allows for more aggressive constant propagation.

    $bits,$signed,$sizeof,$unsigned are examples. Implementations of these system functions in VPI modules will be ignored.
    
Preprocessing Library Modules:
Icarus Verilog does preprocess modules that are loaded from libraries via the -y mechanism

    
                     
                     
                     
