
?? can we use python.bin firmware blob which gives prompt.

?? do we need to use only through c program.
?? or both ways possible




https://docs.python.org/3/extending/embedding.html
-------------------------------------------------------

When you install Python on your computer, you’re usually installing a specific implementation of Python called CPython
You could call CPython the default Python implementation since it’s written by the people who define the language itself. 
However, CPython isn’t the only implementation of Python. 

some implementations that are specifically aimed at writing embedded code.
MicroPython
CircuitPython

extending python vs Embedding python

Extending Python:
------------------
extend the functionality of Python by attaching a library of C functions to it


Embedding python:
-----------------
It is also possible to do it the other way around: enrich your C/C++ application by embedding Python in it. 
Embedding provides your application with the ability to implement some of the functionality of your application in Python rather than C or C+


Embedding Python is similar to extending it, but not quite. 
The difference is that when you extend Python, the main program of the application is still the Python interpreter,
while if you embed Python,
the main program may have nothing to do with Python — instead, some parts of the application occasionally call the Python interpreter to run some Python code.


So if you are embedding Python, you are providing your own main program. 
One of the things this main program has to do is initialize the Python interpreter.
At the very least, you have to call the function Py_Initialize().
There are optional calls to pass command line arguments to Python.
Then later you can call the interpreter from any part of the application.




There are several different ways to call the interpreter: 
you can pass a string containing Python statements to PyRun_SimpleString(), 
or you can pass a stdio file pointer and a file name (for identification in error messages only) to PyRun_SimpleFile().
You can also call the lower-level operations described  to construct and use Python objects.


High level embedding of python script in c program 
low level embedding of python code in c program.

Python/C API Reference Manual

Compiling and Linking  python interpreter under Unix-like systems:
--------------------
in order to embed the Python interpreter into your application, 
particularly because Python needs to load library modules implemented as C dynamic extensions (.so files) linked against it.



To find out the required compiler and linker flags, you can execute the pythonX.Y-config script which is generated as part of the installation process (a python3-config script may also be available). This script has several options, of which the following will be directly useful to you:

pythonX.Y-config --cflags will give you the recommended flags when compiling:

$ /opt/bin/python3.4-config --cflags
-I/opt/include/python3.4m -I/opt/include/python3.4m -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes
pythonX.Y-config --ldflags will give you the recommended flags when linking:

$ /opt/bin/python3.4-config --ldflags
-L/opt/lib/python3.4/config-3.4m -lpthread -ldl -lutil -lm -lpython3.4m -Xlinker -export-dynamic


To avoid confusion between several Python installations (and especially between the system Python and your own compiled Python), it is recommended that you use the absolute path to pythonX.Y-config, as in the above example.

If this procedure doesn’t work (it is not guaranteed to work for all Unix-like platforms) 
you will have to read your system’s documentation about dynamic linking 
and/or examine Python’s Makefile (use sysconfig.get_makefile_filename() to find its location) and compilation options. 
In this case, the sysconfig module is a useful tool to programmatically extract the configuration values that you will want to combine together.

For example:
>>>
>>> import sysconfig
>>> sysconfig.get_config_var('LIBS')
'-lpthread -ldl  -lutil'
>>> sysconfig.get_config_var('LINKFORSHARED')
'-Xlinker -export-dynamic'








