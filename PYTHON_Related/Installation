https://realpython.com/intro-to-pyenv/

Managing Multiple Python Versions With pyenv
----------------------------------------------

Why Not Use System Python?
--------------------------
“System Python” is the Python that comes installed on your operating system
$ which python
/usr/bin/python

$ python -V
Pyhton 2.7.12

To install a package into your system Python, you have to run sudo pip install. 
That’s because you’re installing the Python package globally, which is a real problem 
if another user comes along and wants to install a slightly older version of the package.


Even if your Python version is installed in /usr/local/bin/python3, you’re still not safe. 
You will run into the same permissions and flexibility problems described above.

In addition, you don’t really have much control over what version of Python comes installed on your OS

What About a Package Manager?
--------------------------------------
The next logical place to look is package managers. 
Programs such as apt, yum, brew, or port are typical next options. 
After all, this is how you install most packages to your system. Unfortunately, you’ll find some of the same problems using a package manager.

By default, package managers tend to install their packages into the global system space instead of the user space.
Again, these system level packages pollute your development environment and make it hard to share a workspace with others.



With these constraints in mind, let’s recap the criteria that would let you install and manage Python versions easily and flexibly:

Install Python in your user space
Install multiple versions of Python
Specify the exact Python version you want
Switch between the installed versions
pyenv lets you do all of these things and more.

installing pyenv
-----------------
sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl

curl https://pyenv.run | bash

This will install pyenv along with a few plugins that are useful:

pyenv: The actual pyenv application
pyenv-virtualenv: Plugin for pyenv and virtual environments
pyenv-update: Plugin for updating pyenv
pyenv-doctor: Plugin to verify that pyenv and build dependencies are installed
pyenv-which-ext: Plugin to automatically lookup system commands

At the end of the run, you should see something like this:

WARNING: seems you still have not added 'pyenv' to the load path.

# Load pyenv automatically by adding
# the following to ~/.bashrc:

export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
The output will be based on your shell. But you should follow the instructions to add pyenv to your path and to initialize pyenv/pyenv-virtualenv auto completion. Once you’ve done this, you need to reload your shell:

$ exec "$SHELL" # Or just restart your terminal


Using pyenv to Install Python
------------------------------
pyenv install --list 
pyenv install --list | grep " 3\.[678]"

pyenv install -v 3.7.2
This will take a while because pyenv is building Python from source, but once it’s done, you’ll have Python 3.7.2 available on your local machine. 

root@eb3e6c3fbb9b:/home/ARM_FDPIC_Toolset# pyenv install -v 3.8.6
tail: unrecognized file system type 0x794c7630 for '/tmp/python-build.20210107142843.15680.log'. please report this to bug-coreutils@gnu.org. reverting to polling
Downloading Python-3.8.6.tar.xz...
-> https://www.python.org/ftp/python/3.8.6/Python-3.8.6.tar.xz
/tmp/python-build.20210107142843.15680 /home/ARM_FDPIC_Toolset
Installing Python-3.8.6...
/tmp/python-build.20210107142843.15680/Python-3.8.6 /tmp/python-build.20210107142843.15680 /home/ARM_FDPIC_Toolset
checking build system type... x86_64-pc-linux-gnu
checking host system type... x86_64-pc-linux-gnu




Installation Location
---------------------------
 pyenv works by building Python from source. Each version that you have installed is located nicely in your pyenv root directory:

$ ls ~/.pyenv/versions/
2.7.15  3.6.8  3.8-dev
All of your versions will be located here. This is handy because removing these versions is trivial:

$ rm -rf ~/.pyenv/versions/2.7.15
Of course pyenv also provides a command to uninstall a particular Python version:

$ pyenv uninstall 2.7.15

Using Your New Python
-------------------------

pyenv versions
python -V
which python
pyenv which python


pyenv global 2.7.15

pyenv global system. : to go back to the system version of Python as the default



Exploring pyenv Commands
----------------------------

pyenv commands

local
The local command is often used to set an application-specific Python version. You could use it to set the version to 2.7.15:
$ pyenv local 2.7.15

shell
The shell command is used to set a shell-specific Python version. For example, if you wanted to test out the 3.8-dev version of Python, you can do this:
$ pyenv shell 3.8-dev


Virtual Environments and pyenv
------------------------------------
Virtual environments are a big part of managing Python installations and applications
