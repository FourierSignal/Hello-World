#include <winsock2.h>
#include <ws2tcpip.h>
#include <npcap.h>

#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "npcap.lib")

#define MAX_PACKET_SIZE 65535
#define MAX_FRAGMENTS 10000

// Fragment information structure
typedef struct
{
    BOOL fInUse;
    DWORD dwSrcIP;
    DWORD dwID;
    DWORD dwFragOff;
    DWORD dwFragSize;
    BYTE byData[MAX_PACKET_SIZE];
} FRAGMENT, *PFRAGMENT;

// Function to reassemble fragments
void ReassembleFragments(PFRAGMENT pFragments, DWORD dwCount)
{
    for (DWORD i = 0; i < dwCount; i++)
    {
        PFRAGMENT pFragment = &pFragments[i];
        if (!pFragment->fInUse)
            continue;

        // Check if this fragment is the first fragment of a datagram
        if ((pFragment->dwFragOff & 0x1FFF) == 0)
        {
            DWORD dwTotalSize = 0;
            DWORD dwID = pFragment->dwID;
            DWORD dwSrcIP = pFragment->dwSrcIP;

            // Calculate the total size of the datagram
            for (DWORD j = i; j < dwCount; j++)
            {
                PFRAGMENT pFragment2 = &pFragments[j];
                if (!pFragment2->fInUse || pFragment2->dwID != dwID || pFragment2->dwSrcIP != dwSrcIP)
                    continue;

                dwTotalSize += pFragment2->dwFragSize;
            }

            // Allocate a buffer to hold the complete datagram
            BYTE* pData = (BYTE*)malloc(dwTotalSize);
            if (pData == NULL)
                continue;

            // Copy the data from each fragment into the buffer
            DWORD dwOffset = 0;
            for (DWORD j = i; j < dwCount; j++)
            {
                PFRAGMENT pFragment2 = &pFragments[j];
                if (!pFragment2->fInUse || pFragment2->dwID != dwID || pFragment2->dwSrcIP != dwSrcIP)
                    continue;

                memcpy(pData + dwOffset, pFragment2->byData, pFragment2->dwFragSize);
                dwOffset += pFragment2->dwFragSize;

                pFragment2->fInUse = FALSE;
            }

            // Process the complete datagram
            printf("Reassembled IPv4 datagram: size=%u, src=%u.%u.%u.%u\n",
                dwTotalSize, (dwSrcIP & 0xFF), (dwSrcIP & 0xFF00) >> 8, (dwSrcIP & 0xFF







#include <winsock2.h>
#include <ws2tcpip.h>
#include <npcap.h>

#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "npcap.lib")

#define MAX_PACKET_SIZE 65535
#define MAX_FRAGMENTS 10000

// Fragment information structure
typedef struct
{
    BOOL fInUse;
    DWORD dwSrcIP;
    DWORD dwID;
    DWORD dwFragOff;
    DWORD dwFragSize;
    BYTE byData[MAX_PACKET_SIZE];
} FRAGMENT, *PFRAGMENT;

// Callback function for received packets
void PacketHandler(u_char *user, const struct pcap_pkthdr *h, const u_char *bytes)
{
    PFRAGMENT pFragments = (PFRAGMENT)user;

    // Check if the packet is an IPv4 fragment
    if (h->len >= 20 && (bytes[9] == 0x40 || bytes[9] == 0x60))
    {
        DWORD dwSrcIP = *(DWORD*)(bytes + 12);
        DWORD dwID = *(WORD*)(bytes + 4);
        DWORD dwFragOff = *(WORD*)(bytes + 6) & 0x1FFF;
        DWORD dwFragSize = h->len - 20;

        // Find a free fragment structure
        PFRAGMENT pFragment = NULL;
        for (DWORD i = 0; i < MAX_FRAGMENTS; i++)
        {
            if (!pFragments[i].fInUse)
            {
                pFragment = &pFragments[i];
                break;
            }
        }

        // If we couldn't find a free fragment, discard this fragment
        if (pFragment == NULL)
            return;

        // Store the fragment information
        pFragment->fInUse = TRUE;
        pFragment->dwSrcIP = dwSrcIP;
        pFragment->dwID = dwID;
        pFragment->dwFragOff = dwFragOff;
        pFragment->dwFragSize = dwFragSize;
        memcpy(pFragment->byData, bytes + 20, dwFragSize);
    }
}

int main(int argc, char* argv[])
{
    // Initialize Winsock
    WSADATA wsaData;
    int nResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (nResult != 0)
    {
        printf("WSAStartup failed: %d\n", nResult);
        return 1;
    }

    // Open the Npcap adapter
    char szError[PCAP_ERRBUF_SIZE];
    pcap_if_t* pDevices;
    nResult = pcap_findalldevs(&pDevices, szError);
    if (nResult != 0)
    {
        printf("pcap_find



#include <npcap.h>
#include <stdio.h>

void packet_handler(u_char *param, const struct pcap_pkthdr *header, const u_char *pkt_data)
{
    struct iphdr *ip;
    u_int ip_len;

    /* Get the IP header and its length */
    ip = (struct iphdr *)(pkt_data + 14);
    ip_len = ip->ihl * 4;

    /* Check if the packet is a fragment */
    if (ntohs(ip->frag_off) & 0x1fff)
    {
        /* This is a fragment, reassemble the packet */
        ...
    }
    else
    {
        /* This is not a fragment, process the packet */
        ...
    }
}




#include <pcap.h>
#include <stdio.h>
#include <string.h>
#include <netinet/ip.h>

#define IP_MF 0x2000 /* More fragments flag */
#define IP_OFFMASK 0x1fff /* Mask for fragment offset */

#define MAX_FRAGMENTS 100

struct fragment {
    u_char *data;
    int len;
    int offset;
};

struct fragments {
    struct fragment fragments[MAX_FRAGMENTS];
    int num_fragments;
};

struct fragments fragments[65536];

void packet_handler(u_char *param, const struct pcap_pkthdr *header, const u_char *pkt_data)
{
    struct iphdr *ip;
    u_int ip_len;
    u_short id, off;
    struct fragments *f;

    /* Get the IP header and its length */
    ip = (struct iphdr *)(pkt_data + 14);
    ip_len = ip->ihl * 4;

    /* Get the fragment ID and offset */
    id = ntohs(ip->id);
    off = ntohs(ip->frag_off) & IP_OFFMASK;

    /* Get the fragment list for this ID */
    f = &fragments[id];

    /* Check if the packet is a fragment */
    if (ntohs(ip->frag_off) & IP_MF)
    {
        /* This is a fragment, add it to the list */
        if (f->num_fragments < MAX_FRAGMENTS)
        {
            f->fragments[f->num_fragments].data = malloc(header->len - 14 - ip_len);
            memcpy(f->fragments[f->num_fragments].data, pkt_data + 14 + ip_len, header->len - 14 - ip_len);
            f->fragments[f->num_fragments].len = header->len - 14 - ip_len;
            f->fragments[f->num_fragments].offset = off * 8;
            f->num_fragments++;
        }
    }
    else
    {
        /* This is the last fragment, reassemble the packet */
        int i;
        u_char *data;
        int data_len;

        /* Allocate memory for the reassembled packet */
        data = malloc(header->len - 14 + (off * 8));
        data_len = header->len - 14 - ip_len;

        /* Copy the data from the last fragment into the buffer */
        memcpy(data, pkt_data + 14 + ip_len, header->len - 14 - ip_len);

        /* Add the data from each fragment to the buffer */
        for (i = 0; i < f->num_fragments; i++)
        {
            mem


#include <pcap.h>
#include <stdio.h>
#include <string.h>
#include <netinet/ip.h>

#define IP_MF 0x2000 /* More fragments flag */
#define IP_OFFMASK 0x1fff /* Mask for fragment offset */

#define MAX_FRAGMENTS 100

struct fragment {
    u_char *data;
    int len;
    int offset;
};

struct fragments {
    struct fragment fragments[MAX_FRAGMENTS];
    int num_fragments;
};

struct fragments fragments[65536];

void packet_handler(u_char *param, const struct pcap_pkthdr *header, const u_char *pkt_data)
{
    struct iphdr *ip;
    u_int ip_len;
    u_short id, off;
    struct fragments *f;

    /* Get the IP header and its length */
    ip = (struct iphdr *)(pkt_data + 14);
    ip_len = ip->ihl * 4;

    /* Get the fragment ID and offset */
    id = ntohs(ip->id);
    off = ntohs(ip->frag_off) & IP_OFFMASK;

    /* Get the fragment list for this ID */
    f = &fragments[id];

    /* Check if the packet is a fragment */
    if (ntohs(ip->frag_off) & IP_MF)
    {
        /* This is a fragment, add it to the list */
        if (f->num_fragments < MAX_FRAGMENTS)
        {
            f->fragments[f->num_fragments].data = malloc(header->len - 14 - ip_len);
            memcpy(f->fragments[f->num_fragments].data, pkt_data + 14 + ip_len, header->len - 14 - ip_len);
            f->fragments[f->num_fragments].len = header->len - 14 - ip_len;
            f->fragments[f->num_fragments].offset = off * 8;
            f->num_fragments++;
        }
    }
    else
    {
        /* This is the last fragment, reassemble the packet */
        int i;
        u_char *data;
        int data_len;

        /* Allocate memory for the reassembled packet */
        data = malloc(header->len - 14 + (off * 8));
        data_len = header->len - 14 - ip_len;

        /* Copy the data from the last fragment into the buffer */
        memcpy(data, pkt_data + 14 + ip_len, header->len - 14 - ip_len);

        /* Add the data from each fragment to the buffer */
        for (i = 0; i < f->num_fragments; i++)
        {
            mem

